package com.kevin.appfoodpie.values;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_MORE".
*/
public class DataMoreDao extends AbstractDao<DataMore, Long> {

    public static final String TABLENAME = "DATA_MORE";

    /**
     * Properties of entity DataMore.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Img = new Property(1, String.class, "img", false, "IMG");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Qk = new Property(3, String.class, "qk", false, "QK");
        public final static Property Db = new Property(4, String.class, "db", false, "DB");
        public final static Property Zf = new Property(5, String.class, "zf", false, "ZF");
        public final static Property Ts = new Property(6, String.class, "ts", false, "TS");
        public final static Property Ss = new Property(7, String.class, "ss", false, "SS");
    }


    public DataMoreDao(DaoConfig config) {
        super(config);
    }
    
    public DataMoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_MORE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IMG\" TEXT," + // 1: img
                "\"NAME\" TEXT," + // 2: name
                "\"QK\" TEXT," + // 3: qk
                "\"DB\" TEXT," + // 4: db
                "\"ZF\" TEXT," + // 5: zf
                "\"TS\" TEXT," + // 6: ts
                "\"SS\" TEXT);"); // 7: ss
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_MORE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataMore entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String qk = entity.getQk();
        if (qk != null) {
            stmt.bindString(4, qk);
        }
 
        String db = entity.getDb();
        if (db != null) {
            stmt.bindString(5, db);
        }
 
        String zf = entity.getZf();
        if (zf != null) {
            stmt.bindString(6, zf);
        }
 
        String ts = entity.getTs();
        if (ts != null) {
            stmt.bindString(7, ts);
        }
 
        String ss = entity.getSs();
        if (ss != null) {
            stmt.bindString(8, ss);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataMore entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String qk = entity.getQk();
        if (qk != null) {
            stmt.bindString(4, qk);
        }
 
        String db = entity.getDb();
        if (db != null) {
            stmt.bindString(5, db);
        }
 
        String zf = entity.getZf();
        if (zf != null) {
            stmt.bindString(6, zf);
        }
 
        String ts = entity.getTs();
        if (ts != null) {
            stmt.bindString(7, ts);
        }
 
        String ss = entity.getSs();
        if (ss != null) {
            stmt.bindString(8, ss);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DataMore readEntity(Cursor cursor, int offset) {
        DataMore entity = new DataMore( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // img
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // qk
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // db
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zf
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ts
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // ss
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataMore entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQk(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDb(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZf(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTs(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSs(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DataMore entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DataMore entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DataMore entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
